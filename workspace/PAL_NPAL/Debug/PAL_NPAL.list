
PAL_NPAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bc0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08000d48  08000d48  00001d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000da8  08000da8  0000205c  2**0
                  CONTENTS
  4 .ARM          00000000  08000da8  08000da8  0000205c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000da8  08000da8  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000da8  08000da8  00001da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000dac  08000dac  00001dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000db0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000205c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000205c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000205c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000943  00000000  00000000  00002086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000034f  00000000  00000000  000029c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  00002d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000ca  00000000  00000000  00002e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cac  00000000  00000000  00002f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001208  00000000  00000000  00005bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000971b  00000000  00000000  00006dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000104d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a0c  00000000  00000000  0001051c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00010f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d30 	.word	0x08000d30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08000d30 	.word	0x08000d30

080001c8 <change_access_level_unpriv>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

// Access level demonstration of the ARM processor
void change_access_level_unpriv() {			// changing to NPAL
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	__asm volatile (
 80001cc:	f3ef 8014 	mrs	r0, CONTROL
 80001d0:	f040 0001 	orr.w	r0, r0, #1
 80001d4:	f380 8814 	msr	CONTROL, r0
			"MRS R0, CONTROL\t\n"		//	Read
			"ORR R0, R0, #0x01\t\n"		//	Modify
			"MSR CONTROL, R0\t\n"		//	write
	);
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr

080001e0 <generate_interrupt>:
void generate_interrupt() {
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
	uint32_t *pSTIR = (uint32_t *) 0xE000EF00;
 80001e6:	4b09      	ldr	r3, [pc, #36]	@ (800020c <generate_interrupt+0x2c>)
 80001e8:	607b      	str	r3, [r7, #4]
	uint32_t *pISER0 = (uint32_t *) 0xE000E100;
 80001ea:	4b09      	ldr	r3, [pc, #36]	@ (8000210 <generate_interrupt+0x30>)
 80001ec:	603b      	str	r3, [r7, #0]
	*pISER0 |= 1 << 3;
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f043 0208 	orr.w	r2, r3, #8
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	601a      	str	r2, [r3, #0]
	*pSTIR = 3 & 0x1FF;
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	2203      	movs	r2, #3
 80001fe:	601a      	str	r2, [r3, #0]
}
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000ef00 	.word	0xe000ef00
 8000210:	e000e100 	.word	0xe000e100

08000214 <HardFault_Handler>:
void HardFault_Handler() {
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	printf("Hard fault detected.\n");
 8000218:	4802      	ldr	r0, [pc, #8]	@ (8000224 <HardFault_Handler+0x10>)
 800021a:	f000 f9f9 	bl	8000610 <puts>
	while(1);
 800021e:	bf00      	nop
 8000220:	e7fd      	b.n	800021e <HardFault_Handler+0xa>
 8000222:	bf00      	nop
 8000224:	08000d48 	.word	0x08000d48

08000228 <main>:
}
int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
    printf("In thread mode : Before Interrupt.\n");
 800022c:	4805      	ldr	r0, [pc, #20]	@ (8000244 <main+0x1c>)
 800022e:	f000 f9ef 	bl	8000610 <puts>
    change_access_level_unpriv();					// changes to NPAL
 8000232:	f7ff ffc9 	bl	80001c8 <change_access_level_unpriv>
    generate_interrupt();							// executes in PAL (Handler mode)
 8000236:	f7ff ffd3 	bl	80001e0 <generate_interrupt>
    printf("In thread mode : After Interrupt.\n");
 800023a:	4803      	ldr	r0, [pc, #12]	@ (8000248 <main+0x20>)
 800023c:	f000 f9e8 	bl	8000610 <puts>
    for(;;);
 8000240:	bf00      	nop
 8000242:	e7fd      	b.n	8000240 <main+0x18>
 8000244:	08000d60 	.word	0x08000d60
 8000248:	08000d84 	.word	0x08000d84

0800024c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b086      	sub	sp, #24
 8000250:	af00      	add	r7, sp, #0
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000258:	2300      	movs	r3, #0
 800025a:	617b      	str	r3, [r7, #20]
 800025c:	e00a      	b.n	8000274 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800025e:	f3af 8000 	nop.w
 8000262:	4601      	mov	r1, r0
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	1c5a      	adds	r2, r3, #1
 8000268:	60ba      	str	r2, [r7, #8]
 800026a:	b2ca      	uxtb	r2, r1
 800026c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800026e:	697b      	ldr	r3, [r7, #20]
 8000270:	3301      	adds	r3, #1
 8000272:	617b      	str	r3, [r7, #20]
 8000274:	697a      	ldr	r2, [r7, #20]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	429a      	cmp	r2, r3
 800027a:	dbf0      	blt.n	800025e <_read+0x12>
  }

  return len;
 800027c:	687b      	ldr	r3, [r7, #4]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3718      	adds	r7, #24
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}

08000286 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000286:	b580      	push	{r7, lr}
 8000288:	b086      	sub	sp, #24
 800028a:	af00      	add	r7, sp, #0
 800028c:	60f8      	str	r0, [r7, #12]
 800028e:	60b9      	str	r1, [r7, #8]
 8000290:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]
 8000296:	e009      	b.n	80002ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	1c5a      	adds	r2, r3, #1
 800029c:	60ba      	str	r2, [r7, #8]
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	4618      	mov	r0, r3
 80002a2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	3301      	adds	r3, #1
 80002aa:	617b      	str	r3, [r7, #20]
 80002ac:	697a      	ldr	r2, [r7, #20]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	dbf1      	blt.n	8000298 <_write+0x12>
  }
  return len;
 80002b4:	687b      	ldr	r3, [r7, #4]
}
 80002b6:	4618      	mov	r0, r3
 80002b8:	3718      	adds	r7, #24
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}

080002be <_close>:

int _close(int file)
{
 80002be:	b480      	push	{r7}
 80002c0:	b083      	sub	sp, #12
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80002c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
 80002dc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80002de:	683b      	ldr	r3, [r7, #0]
 80002e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80002e4:	605a      	str	r2, [r3, #4]
  return 0;
 80002e6:	2300      	movs	r3, #0
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr

080002f2 <_isatty>:

int _isatty(int file)
{
 80002f2:	b480      	push	{r7}
 80002f4:	b083      	sub	sp, #12
 80002f6:	af00      	add	r7, sp, #0
 80002f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80002fa:	2301      	movs	r3, #1
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr

08000306 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000306:	b480      	push	{r7}
 8000308:	b085      	sub	sp, #20
 800030a:	af00      	add	r7, sp, #0
 800030c:	60f8      	str	r0, [r7, #12]
 800030e:	60b9      	str	r1, [r7, #8]
 8000310:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000312:	2300      	movs	r3, #0
}
 8000314:	4618      	mov	r0, r3
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	bc80      	pop	{r7}
 800031c:	4770      	bx	lr
	...

08000320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000328:	4a14      	ldr	r2, [pc, #80]	@ (800037c <_sbrk+0x5c>)
 800032a:	4b15      	ldr	r3, [pc, #84]	@ (8000380 <_sbrk+0x60>)
 800032c:	1ad3      	subs	r3, r2, r3
 800032e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000334:	4b13      	ldr	r3, [pc, #76]	@ (8000384 <_sbrk+0x64>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d102      	bne.n	8000342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800033c:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <_sbrk+0x64>)
 800033e:	4a12      	ldr	r2, [pc, #72]	@ (8000388 <_sbrk+0x68>)
 8000340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000342:	4b10      	ldr	r3, [pc, #64]	@ (8000384 <_sbrk+0x64>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	693a      	ldr	r2, [r7, #16]
 800034c:	429a      	cmp	r2, r3
 800034e:	d207      	bcs.n	8000360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000350:	f000 fa8c 	bl	800086c <__errno>
 8000354:	4603      	mov	r3, r0
 8000356:	220c      	movs	r2, #12
 8000358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800035a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800035e:	e009      	b.n	8000374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000360:	4b08      	ldr	r3, [pc, #32]	@ (8000384 <_sbrk+0x64>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000366:	4b07      	ldr	r3, [pc, #28]	@ (8000384 <_sbrk+0x64>)
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4413      	add	r3, r2
 800036e:	4a05      	ldr	r2, [pc, #20]	@ (8000384 <_sbrk+0x64>)
 8000370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000372:	68fb      	ldr	r3, [r7, #12]
}
 8000374:	4618      	mov	r0, r3
 8000376:	3718      	adds	r7, #24
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20020000 	.word	0x20020000
 8000380:	00000400 	.word	0x00000400
 8000384:	20000078 	.word	0x20000078
 8000388:	200001c8 	.word	0x200001c8

0800038c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800038c:	480d      	ldr	r0, [pc, #52]	@ (80003c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000390:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000394:	480c      	ldr	r0, [pc, #48]	@ (80003c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000396:	490d      	ldr	r1, [pc, #52]	@ (80003cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000398:	4a0d      	ldr	r2, [pc, #52]	@ (80003d0 <LoopForever+0xe>)
  movs r3, #0
 800039a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800039c:	e002      	b.n	80003a4 <LoopCopyDataInit>

0800039e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a2:	3304      	adds	r3, #4

080003a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a8:	d3f9      	bcc.n	800039e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003aa:	4a0a      	ldr	r2, [pc, #40]	@ (80003d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003ac:	4c0a      	ldr	r4, [pc, #40]	@ (80003d8 <LoopForever+0x16>)
  movs r3, #0
 80003ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b0:	e001      	b.n	80003b6 <LoopFillZerobss>

080003b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b4:	3204      	adds	r2, #4

080003b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b8:	d3fb      	bcc.n	80003b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ba:	f000 fa5d 	bl	8000878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003be:	f7ff ff33 	bl	8000228 <main>

080003c2 <LoopForever>:

LoopForever:
  b LoopForever
 80003c2:	e7fe      	b.n	80003c2 <LoopForever>
  ldr   r0, =_estack
 80003c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003cc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80003d0:	08000db0 	.word	0x08000db0
  ldr r2, =_sbss
 80003d4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80003d8:	200001c8 	.word	0x200001c8

080003dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003dc:	e7fe      	b.n	80003dc <ADC_IRQHandler>
	...

080003e0 <std>:
 80003e0:	2300      	movs	r3, #0
 80003e2:	b510      	push	{r4, lr}
 80003e4:	4604      	mov	r4, r0
 80003e6:	e9c0 3300 	strd	r3, r3, [r0]
 80003ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80003ee:	6083      	str	r3, [r0, #8]
 80003f0:	8181      	strh	r1, [r0, #12]
 80003f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80003f4:	81c2      	strh	r2, [r0, #14]
 80003f6:	6183      	str	r3, [r0, #24]
 80003f8:	4619      	mov	r1, r3
 80003fa:	2208      	movs	r2, #8
 80003fc:	305c      	adds	r0, #92	@ 0x5c
 80003fe:	f000 f9e7 	bl	80007d0 <memset>
 8000402:	4b0d      	ldr	r3, [pc, #52]	@ (8000438 <std+0x58>)
 8000404:	6263      	str	r3, [r4, #36]	@ 0x24
 8000406:	4b0d      	ldr	r3, [pc, #52]	@ (800043c <std+0x5c>)
 8000408:	62a3      	str	r3, [r4, #40]	@ 0x28
 800040a:	4b0d      	ldr	r3, [pc, #52]	@ (8000440 <std+0x60>)
 800040c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800040e:	4b0d      	ldr	r3, [pc, #52]	@ (8000444 <std+0x64>)
 8000410:	6323      	str	r3, [r4, #48]	@ 0x30
 8000412:	4b0d      	ldr	r3, [pc, #52]	@ (8000448 <std+0x68>)
 8000414:	6224      	str	r4, [r4, #32]
 8000416:	429c      	cmp	r4, r3
 8000418:	d006      	beq.n	8000428 <std+0x48>
 800041a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800041e:	4294      	cmp	r4, r2
 8000420:	d002      	beq.n	8000428 <std+0x48>
 8000422:	33d0      	adds	r3, #208	@ 0xd0
 8000424:	429c      	cmp	r4, r3
 8000426:	d105      	bne.n	8000434 <std+0x54>
 8000428:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800042c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000430:	f000 ba46 	b.w	80008c0 <__retarget_lock_init_recursive>
 8000434:	bd10      	pop	{r4, pc}
 8000436:	bf00      	nop
 8000438:	08000621 	.word	0x08000621
 800043c:	08000643 	.word	0x08000643
 8000440:	0800067b 	.word	0x0800067b
 8000444:	0800069f 	.word	0x0800069f
 8000448:	2000007c 	.word	0x2000007c

0800044c <stdio_exit_handler>:
 800044c:	4a02      	ldr	r2, [pc, #8]	@ (8000458 <stdio_exit_handler+0xc>)
 800044e:	4903      	ldr	r1, [pc, #12]	@ (800045c <stdio_exit_handler+0x10>)
 8000450:	4803      	ldr	r0, [pc, #12]	@ (8000460 <stdio_exit_handler+0x14>)
 8000452:	f000 b869 	b.w	8000528 <_fwalk_sglue>
 8000456:	bf00      	nop
 8000458:	20000000 	.word	0x20000000
 800045c:	08000bb9 	.word	0x08000bb9
 8000460:	20000010 	.word	0x20000010

08000464 <cleanup_stdio>:
 8000464:	6841      	ldr	r1, [r0, #4]
 8000466:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <cleanup_stdio+0x34>)
 8000468:	4299      	cmp	r1, r3
 800046a:	b510      	push	{r4, lr}
 800046c:	4604      	mov	r4, r0
 800046e:	d001      	beq.n	8000474 <cleanup_stdio+0x10>
 8000470:	f000 fba2 	bl	8000bb8 <_fflush_r>
 8000474:	68a1      	ldr	r1, [r4, #8]
 8000476:	4b09      	ldr	r3, [pc, #36]	@ (800049c <cleanup_stdio+0x38>)
 8000478:	4299      	cmp	r1, r3
 800047a:	d002      	beq.n	8000482 <cleanup_stdio+0x1e>
 800047c:	4620      	mov	r0, r4
 800047e:	f000 fb9b 	bl	8000bb8 <_fflush_r>
 8000482:	68e1      	ldr	r1, [r4, #12]
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <cleanup_stdio+0x3c>)
 8000486:	4299      	cmp	r1, r3
 8000488:	d004      	beq.n	8000494 <cleanup_stdio+0x30>
 800048a:	4620      	mov	r0, r4
 800048c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000490:	f000 bb92 	b.w	8000bb8 <_fflush_r>
 8000494:	bd10      	pop	{r4, pc}
 8000496:	bf00      	nop
 8000498:	2000007c 	.word	0x2000007c
 800049c:	200000e4 	.word	0x200000e4
 80004a0:	2000014c 	.word	0x2000014c

080004a4 <global_stdio_init.part.0>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	4b0b      	ldr	r3, [pc, #44]	@ (80004d4 <global_stdio_init.part.0+0x30>)
 80004a8:	4c0b      	ldr	r4, [pc, #44]	@ (80004d8 <global_stdio_init.part.0+0x34>)
 80004aa:	4a0c      	ldr	r2, [pc, #48]	@ (80004dc <global_stdio_init.part.0+0x38>)
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	4620      	mov	r0, r4
 80004b0:	2200      	movs	r2, #0
 80004b2:	2104      	movs	r1, #4
 80004b4:	f7ff ff94 	bl	80003e0 <std>
 80004b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80004bc:	2201      	movs	r2, #1
 80004be:	2109      	movs	r1, #9
 80004c0:	f7ff ff8e 	bl	80003e0 <std>
 80004c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80004c8:	2202      	movs	r2, #2
 80004ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004ce:	2112      	movs	r1, #18
 80004d0:	f7ff bf86 	b.w	80003e0 <std>
 80004d4:	200001b4 	.word	0x200001b4
 80004d8:	2000007c 	.word	0x2000007c
 80004dc:	0800044d 	.word	0x0800044d

080004e0 <__sfp_lock_acquire>:
 80004e0:	4801      	ldr	r0, [pc, #4]	@ (80004e8 <__sfp_lock_acquire+0x8>)
 80004e2:	f000 b9ee 	b.w	80008c2 <__retarget_lock_acquire_recursive>
 80004e6:	bf00      	nop
 80004e8:	200001bd 	.word	0x200001bd

080004ec <__sfp_lock_release>:
 80004ec:	4801      	ldr	r0, [pc, #4]	@ (80004f4 <__sfp_lock_release+0x8>)
 80004ee:	f000 b9e9 	b.w	80008c4 <__retarget_lock_release_recursive>
 80004f2:	bf00      	nop
 80004f4:	200001bd 	.word	0x200001bd

080004f8 <__sinit>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	4604      	mov	r4, r0
 80004fc:	f7ff fff0 	bl	80004e0 <__sfp_lock_acquire>
 8000500:	6a23      	ldr	r3, [r4, #32]
 8000502:	b11b      	cbz	r3, 800050c <__sinit+0x14>
 8000504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000508:	f7ff bff0 	b.w	80004ec <__sfp_lock_release>
 800050c:	4b04      	ldr	r3, [pc, #16]	@ (8000520 <__sinit+0x28>)
 800050e:	6223      	str	r3, [r4, #32]
 8000510:	4b04      	ldr	r3, [pc, #16]	@ (8000524 <__sinit+0x2c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1f5      	bne.n	8000504 <__sinit+0xc>
 8000518:	f7ff ffc4 	bl	80004a4 <global_stdio_init.part.0>
 800051c:	e7f2      	b.n	8000504 <__sinit+0xc>
 800051e:	bf00      	nop
 8000520:	08000465 	.word	0x08000465
 8000524:	200001b4 	.word	0x200001b4

08000528 <_fwalk_sglue>:
 8000528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800052c:	4607      	mov	r7, r0
 800052e:	4688      	mov	r8, r1
 8000530:	4614      	mov	r4, r2
 8000532:	2600      	movs	r6, #0
 8000534:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000538:	f1b9 0901 	subs.w	r9, r9, #1
 800053c:	d505      	bpl.n	800054a <_fwalk_sglue+0x22>
 800053e:	6824      	ldr	r4, [r4, #0]
 8000540:	2c00      	cmp	r4, #0
 8000542:	d1f7      	bne.n	8000534 <_fwalk_sglue+0xc>
 8000544:	4630      	mov	r0, r6
 8000546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800054a:	89ab      	ldrh	r3, [r5, #12]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d907      	bls.n	8000560 <_fwalk_sglue+0x38>
 8000550:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000554:	3301      	adds	r3, #1
 8000556:	d003      	beq.n	8000560 <_fwalk_sglue+0x38>
 8000558:	4629      	mov	r1, r5
 800055a:	4638      	mov	r0, r7
 800055c:	47c0      	blx	r8
 800055e:	4306      	orrs	r6, r0
 8000560:	3568      	adds	r5, #104	@ 0x68
 8000562:	e7e9      	b.n	8000538 <_fwalk_sglue+0x10>

08000564 <_puts_r>:
 8000564:	6a03      	ldr	r3, [r0, #32]
 8000566:	b570      	push	{r4, r5, r6, lr}
 8000568:	6884      	ldr	r4, [r0, #8]
 800056a:	4605      	mov	r5, r0
 800056c:	460e      	mov	r6, r1
 800056e:	b90b      	cbnz	r3, 8000574 <_puts_r+0x10>
 8000570:	f7ff ffc2 	bl	80004f8 <__sinit>
 8000574:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000576:	07db      	lsls	r3, r3, #31
 8000578:	d405      	bmi.n	8000586 <_puts_r+0x22>
 800057a:	89a3      	ldrh	r3, [r4, #12]
 800057c:	0598      	lsls	r0, r3, #22
 800057e:	d402      	bmi.n	8000586 <_puts_r+0x22>
 8000580:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000582:	f000 f99e 	bl	80008c2 <__retarget_lock_acquire_recursive>
 8000586:	89a3      	ldrh	r3, [r4, #12]
 8000588:	0719      	lsls	r1, r3, #28
 800058a:	d502      	bpl.n	8000592 <_puts_r+0x2e>
 800058c:	6923      	ldr	r3, [r4, #16]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d135      	bne.n	80005fe <_puts_r+0x9a>
 8000592:	4621      	mov	r1, r4
 8000594:	4628      	mov	r0, r5
 8000596:	f000 f8c5 	bl	8000724 <__swsetup_r>
 800059a:	b380      	cbz	r0, 80005fe <_puts_r+0x9a>
 800059c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80005a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80005a2:	07da      	lsls	r2, r3, #31
 80005a4:	d405      	bmi.n	80005b2 <_puts_r+0x4e>
 80005a6:	89a3      	ldrh	r3, [r4, #12]
 80005a8:	059b      	lsls	r3, r3, #22
 80005aa:	d402      	bmi.n	80005b2 <_puts_r+0x4e>
 80005ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80005ae:	f000 f989 	bl	80008c4 <__retarget_lock_release_recursive>
 80005b2:	4628      	mov	r0, r5
 80005b4:	bd70      	pop	{r4, r5, r6, pc}
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	da04      	bge.n	80005c4 <_puts_r+0x60>
 80005ba:	69a2      	ldr	r2, [r4, #24]
 80005bc:	429a      	cmp	r2, r3
 80005be:	dc17      	bgt.n	80005f0 <_puts_r+0x8c>
 80005c0:	290a      	cmp	r1, #10
 80005c2:	d015      	beq.n	80005f0 <_puts_r+0x8c>
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	1c5a      	adds	r2, r3, #1
 80005c8:	6022      	str	r2, [r4, #0]
 80005ca:	7019      	strb	r1, [r3, #0]
 80005cc:	68a3      	ldr	r3, [r4, #8]
 80005ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80005d2:	3b01      	subs	r3, #1
 80005d4:	60a3      	str	r3, [r4, #8]
 80005d6:	2900      	cmp	r1, #0
 80005d8:	d1ed      	bne.n	80005b6 <_puts_r+0x52>
 80005da:	2b00      	cmp	r3, #0
 80005dc:	da11      	bge.n	8000602 <_puts_r+0x9e>
 80005de:	4622      	mov	r2, r4
 80005e0:	210a      	movs	r1, #10
 80005e2:	4628      	mov	r0, r5
 80005e4:	f000 f85f 	bl	80006a6 <__swbuf_r>
 80005e8:	3001      	adds	r0, #1
 80005ea:	d0d7      	beq.n	800059c <_puts_r+0x38>
 80005ec:	250a      	movs	r5, #10
 80005ee:	e7d7      	b.n	80005a0 <_puts_r+0x3c>
 80005f0:	4622      	mov	r2, r4
 80005f2:	4628      	mov	r0, r5
 80005f4:	f000 f857 	bl	80006a6 <__swbuf_r>
 80005f8:	3001      	adds	r0, #1
 80005fa:	d1e7      	bne.n	80005cc <_puts_r+0x68>
 80005fc:	e7ce      	b.n	800059c <_puts_r+0x38>
 80005fe:	3e01      	subs	r6, #1
 8000600:	e7e4      	b.n	80005cc <_puts_r+0x68>
 8000602:	6823      	ldr	r3, [r4, #0]
 8000604:	1c5a      	adds	r2, r3, #1
 8000606:	6022      	str	r2, [r4, #0]
 8000608:	220a      	movs	r2, #10
 800060a:	701a      	strb	r2, [r3, #0]
 800060c:	e7ee      	b.n	80005ec <_puts_r+0x88>
	...

08000610 <puts>:
 8000610:	4b02      	ldr	r3, [pc, #8]	@ (800061c <puts+0xc>)
 8000612:	4601      	mov	r1, r0
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	f7ff bfa5 	b.w	8000564 <_puts_r>
 800061a:	bf00      	nop
 800061c:	2000000c 	.word	0x2000000c

08000620 <__sread>:
 8000620:	b510      	push	{r4, lr}
 8000622:	460c      	mov	r4, r1
 8000624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000628:	f000 f8fc 	bl	8000824 <_read_r>
 800062c:	2800      	cmp	r0, #0
 800062e:	bfab      	itete	ge
 8000630:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000632:	89a3      	ldrhlt	r3, [r4, #12]
 8000634:	181b      	addge	r3, r3, r0
 8000636:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800063a:	bfac      	ite	ge
 800063c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800063e:	81a3      	strhlt	r3, [r4, #12]
 8000640:	bd10      	pop	{r4, pc}

08000642 <__swrite>:
 8000642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000646:	461f      	mov	r7, r3
 8000648:	898b      	ldrh	r3, [r1, #12]
 800064a:	05db      	lsls	r3, r3, #23
 800064c:	4605      	mov	r5, r0
 800064e:	460c      	mov	r4, r1
 8000650:	4616      	mov	r6, r2
 8000652:	d505      	bpl.n	8000660 <__swrite+0x1e>
 8000654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000658:	2302      	movs	r3, #2
 800065a:	2200      	movs	r2, #0
 800065c:	f000 f8d0 	bl	8000800 <_lseek_r>
 8000660:	89a3      	ldrh	r3, [r4, #12]
 8000662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000666:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800066a:	81a3      	strh	r3, [r4, #12]
 800066c:	4632      	mov	r2, r6
 800066e:	463b      	mov	r3, r7
 8000670:	4628      	mov	r0, r5
 8000672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000676:	f000 b8e7 	b.w	8000848 <_write_r>

0800067a <__sseek>:
 800067a:	b510      	push	{r4, lr}
 800067c:	460c      	mov	r4, r1
 800067e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000682:	f000 f8bd 	bl	8000800 <_lseek_r>
 8000686:	1c43      	adds	r3, r0, #1
 8000688:	89a3      	ldrh	r3, [r4, #12]
 800068a:	bf15      	itete	ne
 800068c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800068e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000692:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000696:	81a3      	strheq	r3, [r4, #12]
 8000698:	bf18      	it	ne
 800069a:	81a3      	strhne	r3, [r4, #12]
 800069c:	bd10      	pop	{r4, pc}

0800069e <__sclose>:
 800069e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006a2:	f000 b89d 	b.w	80007e0 <_close_r>

080006a6 <__swbuf_r>:
 80006a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a8:	460e      	mov	r6, r1
 80006aa:	4614      	mov	r4, r2
 80006ac:	4605      	mov	r5, r0
 80006ae:	b118      	cbz	r0, 80006b8 <__swbuf_r+0x12>
 80006b0:	6a03      	ldr	r3, [r0, #32]
 80006b2:	b90b      	cbnz	r3, 80006b8 <__swbuf_r+0x12>
 80006b4:	f7ff ff20 	bl	80004f8 <__sinit>
 80006b8:	69a3      	ldr	r3, [r4, #24]
 80006ba:	60a3      	str	r3, [r4, #8]
 80006bc:	89a3      	ldrh	r3, [r4, #12]
 80006be:	071a      	lsls	r2, r3, #28
 80006c0:	d501      	bpl.n	80006c6 <__swbuf_r+0x20>
 80006c2:	6923      	ldr	r3, [r4, #16]
 80006c4:	b943      	cbnz	r3, 80006d8 <__swbuf_r+0x32>
 80006c6:	4621      	mov	r1, r4
 80006c8:	4628      	mov	r0, r5
 80006ca:	f000 f82b 	bl	8000724 <__swsetup_r>
 80006ce:	b118      	cbz	r0, 80006d8 <__swbuf_r+0x32>
 80006d0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80006d4:	4638      	mov	r0, r7
 80006d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006d8:	6823      	ldr	r3, [r4, #0]
 80006da:	6922      	ldr	r2, [r4, #16]
 80006dc:	1a98      	subs	r0, r3, r2
 80006de:	6963      	ldr	r3, [r4, #20]
 80006e0:	b2f6      	uxtb	r6, r6
 80006e2:	4283      	cmp	r3, r0
 80006e4:	4637      	mov	r7, r6
 80006e6:	dc05      	bgt.n	80006f4 <__swbuf_r+0x4e>
 80006e8:	4621      	mov	r1, r4
 80006ea:	4628      	mov	r0, r5
 80006ec:	f000 fa64 	bl	8000bb8 <_fflush_r>
 80006f0:	2800      	cmp	r0, #0
 80006f2:	d1ed      	bne.n	80006d0 <__swbuf_r+0x2a>
 80006f4:	68a3      	ldr	r3, [r4, #8]
 80006f6:	3b01      	subs	r3, #1
 80006f8:	60a3      	str	r3, [r4, #8]
 80006fa:	6823      	ldr	r3, [r4, #0]
 80006fc:	1c5a      	adds	r2, r3, #1
 80006fe:	6022      	str	r2, [r4, #0]
 8000700:	701e      	strb	r6, [r3, #0]
 8000702:	6962      	ldr	r2, [r4, #20]
 8000704:	1c43      	adds	r3, r0, #1
 8000706:	429a      	cmp	r2, r3
 8000708:	d004      	beq.n	8000714 <__swbuf_r+0x6e>
 800070a:	89a3      	ldrh	r3, [r4, #12]
 800070c:	07db      	lsls	r3, r3, #31
 800070e:	d5e1      	bpl.n	80006d4 <__swbuf_r+0x2e>
 8000710:	2e0a      	cmp	r6, #10
 8000712:	d1df      	bne.n	80006d4 <__swbuf_r+0x2e>
 8000714:	4621      	mov	r1, r4
 8000716:	4628      	mov	r0, r5
 8000718:	f000 fa4e 	bl	8000bb8 <_fflush_r>
 800071c:	2800      	cmp	r0, #0
 800071e:	d0d9      	beq.n	80006d4 <__swbuf_r+0x2e>
 8000720:	e7d6      	b.n	80006d0 <__swbuf_r+0x2a>
	...

08000724 <__swsetup_r>:
 8000724:	b538      	push	{r3, r4, r5, lr}
 8000726:	4b29      	ldr	r3, [pc, #164]	@ (80007cc <__swsetup_r+0xa8>)
 8000728:	4605      	mov	r5, r0
 800072a:	6818      	ldr	r0, [r3, #0]
 800072c:	460c      	mov	r4, r1
 800072e:	b118      	cbz	r0, 8000738 <__swsetup_r+0x14>
 8000730:	6a03      	ldr	r3, [r0, #32]
 8000732:	b90b      	cbnz	r3, 8000738 <__swsetup_r+0x14>
 8000734:	f7ff fee0 	bl	80004f8 <__sinit>
 8000738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800073c:	0719      	lsls	r1, r3, #28
 800073e:	d422      	bmi.n	8000786 <__swsetup_r+0x62>
 8000740:	06da      	lsls	r2, r3, #27
 8000742:	d407      	bmi.n	8000754 <__swsetup_r+0x30>
 8000744:	2209      	movs	r2, #9
 8000746:	602a      	str	r2, [r5, #0]
 8000748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800074c:	81a3      	strh	r3, [r4, #12]
 800074e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000752:	e033      	b.n	80007bc <__swsetup_r+0x98>
 8000754:	0758      	lsls	r0, r3, #29
 8000756:	d512      	bpl.n	800077e <__swsetup_r+0x5a>
 8000758:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800075a:	b141      	cbz	r1, 800076e <__swsetup_r+0x4a>
 800075c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000760:	4299      	cmp	r1, r3
 8000762:	d002      	beq.n	800076a <__swsetup_r+0x46>
 8000764:	4628      	mov	r0, r5
 8000766:	f000 f8af 	bl	80008c8 <_free_r>
 800076a:	2300      	movs	r3, #0
 800076c:	6363      	str	r3, [r4, #52]	@ 0x34
 800076e:	89a3      	ldrh	r3, [r4, #12]
 8000770:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000774:	81a3      	strh	r3, [r4, #12]
 8000776:	2300      	movs	r3, #0
 8000778:	6063      	str	r3, [r4, #4]
 800077a:	6923      	ldr	r3, [r4, #16]
 800077c:	6023      	str	r3, [r4, #0]
 800077e:	89a3      	ldrh	r3, [r4, #12]
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	81a3      	strh	r3, [r4, #12]
 8000786:	6923      	ldr	r3, [r4, #16]
 8000788:	b94b      	cbnz	r3, 800079e <__swsetup_r+0x7a>
 800078a:	89a3      	ldrh	r3, [r4, #12]
 800078c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000794:	d003      	beq.n	800079e <__swsetup_r+0x7a>
 8000796:	4621      	mov	r1, r4
 8000798:	4628      	mov	r0, r5
 800079a:	f000 fa5b 	bl	8000c54 <__smakebuf_r>
 800079e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80007a2:	f013 0201 	ands.w	r2, r3, #1
 80007a6:	d00a      	beq.n	80007be <__swsetup_r+0x9a>
 80007a8:	2200      	movs	r2, #0
 80007aa:	60a2      	str	r2, [r4, #8]
 80007ac:	6962      	ldr	r2, [r4, #20]
 80007ae:	4252      	negs	r2, r2
 80007b0:	61a2      	str	r2, [r4, #24]
 80007b2:	6922      	ldr	r2, [r4, #16]
 80007b4:	b942      	cbnz	r2, 80007c8 <__swsetup_r+0xa4>
 80007b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80007ba:	d1c5      	bne.n	8000748 <__swsetup_r+0x24>
 80007bc:	bd38      	pop	{r3, r4, r5, pc}
 80007be:	0799      	lsls	r1, r3, #30
 80007c0:	bf58      	it	pl
 80007c2:	6962      	ldrpl	r2, [r4, #20]
 80007c4:	60a2      	str	r2, [r4, #8]
 80007c6:	e7f4      	b.n	80007b2 <__swsetup_r+0x8e>
 80007c8:	2000      	movs	r0, #0
 80007ca:	e7f7      	b.n	80007bc <__swsetup_r+0x98>
 80007cc:	2000000c 	.word	0x2000000c

080007d0 <memset>:
 80007d0:	4402      	add	r2, r0
 80007d2:	4603      	mov	r3, r0
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d100      	bne.n	80007da <memset+0xa>
 80007d8:	4770      	bx	lr
 80007da:	f803 1b01 	strb.w	r1, [r3], #1
 80007de:	e7f9      	b.n	80007d4 <memset+0x4>

080007e0 <_close_r>:
 80007e0:	b538      	push	{r3, r4, r5, lr}
 80007e2:	4d06      	ldr	r5, [pc, #24]	@ (80007fc <_close_r+0x1c>)
 80007e4:	2300      	movs	r3, #0
 80007e6:	4604      	mov	r4, r0
 80007e8:	4608      	mov	r0, r1
 80007ea:	602b      	str	r3, [r5, #0]
 80007ec:	f7ff fd67 	bl	80002be <_close>
 80007f0:	1c43      	adds	r3, r0, #1
 80007f2:	d102      	bne.n	80007fa <_close_r+0x1a>
 80007f4:	682b      	ldr	r3, [r5, #0]
 80007f6:	b103      	cbz	r3, 80007fa <_close_r+0x1a>
 80007f8:	6023      	str	r3, [r4, #0]
 80007fa:	bd38      	pop	{r3, r4, r5, pc}
 80007fc:	200001b8 	.word	0x200001b8

08000800 <_lseek_r>:
 8000800:	b538      	push	{r3, r4, r5, lr}
 8000802:	4d07      	ldr	r5, [pc, #28]	@ (8000820 <_lseek_r+0x20>)
 8000804:	4604      	mov	r4, r0
 8000806:	4608      	mov	r0, r1
 8000808:	4611      	mov	r1, r2
 800080a:	2200      	movs	r2, #0
 800080c:	602a      	str	r2, [r5, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	f7ff fd79 	bl	8000306 <_lseek>
 8000814:	1c43      	adds	r3, r0, #1
 8000816:	d102      	bne.n	800081e <_lseek_r+0x1e>
 8000818:	682b      	ldr	r3, [r5, #0]
 800081a:	b103      	cbz	r3, 800081e <_lseek_r+0x1e>
 800081c:	6023      	str	r3, [r4, #0]
 800081e:	bd38      	pop	{r3, r4, r5, pc}
 8000820:	200001b8 	.word	0x200001b8

08000824 <_read_r>:
 8000824:	b538      	push	{r3, r4, r5, lr}
 8000826:	4d07      	ldr	r5, [pc, #28]	@ (8000844 <_read_r+0x20>)
 8000828:	4604      	mov	r4, r0
 800082a:	4608      	mov	r0, r1
 800082c:	4611      	mov	r1, r2
 800082e:	2200      	movs	r2, #0
 8000830:	602a      	str	r2, [r5, #0]
 8000832:	461a      	mov	r2, r3
 8000834:	f7ff fd0a 	bl	800024c <_read>
 8000838:	1c43      	adds	r3, r0, #1
 800083a:	d102      	bne.n	8000842 <_read_r+0x1e>
 800083c:	682b      	ldr	r3, [r5, #0]
 800083e:	b103      	cbz	r3, 8000842 <_read_r+0x1e>
 8000840:	6023      	str	r3, [r4, #0]
 8000842:	bd38      	pop	{r3, r4, r5, pc}
 8000844:	200001b8 	.word	0x200001b8

08000848 <_write_r>:
 8000848:	b538      	push	{r3, r4, r5, lr}
 800084a:	4d07      	ldr	r5, [pc, #28]	@ (8000868 <_write_r+0x20>)
 800084c:	4604      	mov	r4, r0
 800084e:	4608      	mov	r0, r1
 8000850:	4611      	mov	r1, r2
 8000852:	2200      	movs	r2, #0
 8000854:	602a      	str	r2, [r5, #0]
 8000856:	461a      	mov	r2, r3
 8000858:	f7ff fd15 	bl	8000286 <_write>
 800085c:	1c43      	adds	r3, r0, #1
 800085e:	d102      	bne.n	8000866 <_write_r+0x1e>
 8000860:	682b      	ldr	r3, [r5, #0]
 8000862:	b103      	cbz	r3, 8000866 <_write_r+0x1e>
 8000864:	6023      	str	r3, [r4, #0]
 8000866:	bd38      	pop	{r3, r4, r5, pc}
 8000868:	200001b8 	.word	0x200001b8

0800086c <__errno>:
 800086c:	4b01      	ldr	r3, [pc, #4]	@ (8000874 <__errno+0x8>)
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	2000000c 	.word	0x2000000c

08000878 <__libc_init_array>:
 8000878:	b570      	push	{r4, r5, r6, lr}
 800087a:	4d0d      	ldr	r5, [pc, #52]	@ (80008b0 <__libc_init_array+0x38>)
 800087c:	4c0d      	ldr	r4, [pc, #52]	@ (80008b4 <__libc_init_array+0x3c>)
 800087e:	1b64      	subs	r4, r4, r5
 8000880:	10a4      	asrs	r4, r4, #2
 8000882:	2600      	movs	r6, #0
 8000884:	42a6      	cmp	r6, r4
 8000886:	d109      	bne.n	800089c <__libc_init_array+0x24>
 8000888:	4d0b      	ldr	r5, [pc, #44]	@ (80008b8 <__libc_init_array+0x40>)
 800088a:	4c0c      	ldr	r4, [pc, #48]	@ (80008bc <__libc_init_array+0x44>)
 800088c:	f000 fa50 	bl	8000d30 <_init>
 8000890:	1b64      	subs	r4, r4, r5
 8000892:	10a4      	asrs	r4, r4, #2
 8000894:	2600      	movs	r6, #0
 8000896:	42a6      	cmp	r6, r4
 8000898:	d105      	bne.n	80008a6 <__libc_init_array+0x2e>
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	f855 3b04 	ldr.w	r3, [r5], #4
 80008a0:	4798      	blx	r3
 80008a2:	3601      	adds	r6, #1
 80008a4:	e7ee      	b.n	8000884 <__libc_init_array+0xc>
 80008a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80008aa:	4798      	blx	r3
 80008ac:	3601      	adds	r6, #1
 80008ae:	e7f2      	b.n	8000896 <__libc_init_array+0x1e>
 80008b0:	08000da8 	.word	0x08000da8
 80008b4:	08000da8 	.word	0x08000da8
 80008b8:	08000da8 	.word	0x08000da8
 80008bc:	08000dac 	.word	0x08000dac

080008c0 <__retarget_lock_init_recursive>:
 80008c0:	4770      	bx	lr

080008c2 <__retarget_lock_acquire_recursive>:
 80008c2:	4770      	bx	lr

080008c4 <__retarget_lock_release_recursive>:
 80008c4:	4770      	bx	lr
	...

080008c8 <_free_r>:
 80008c8:	b538      	push	{r3, r4, r5, lr}
 80008ca:	4605      	mov	r5, r0
 80008cc:	2900      	cmp	r1, #0
 80008ce:	d041      	beq.n	8000954 <_free_r+0x8c>
 80008d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80008d4:	1f0c      	subs	r4, r1, #4
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	bfb8      	it	lt
 80008da:	18e4      	addlt	r4, r4, r3
 80008dc:	f000 f8e0 	bl	8000aa0 <__malloc_lock>
 80008e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000958 <_free_r+0x90>)
 80008e2:	6813      	ldr	r3, [r2, #0]
 80008e4:	b933      	cbnz	r3, 80008f4 <_free_r+0x2c>
 80008e6:	6063      	str	r3, [r4, #4]
 80008e8:	6014      	str	r4, [r2, #0]
 80008ea:	4628      	mov	r0, r5
 80008ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80008f0:	f000 b8dc 	b.w	8000aac <__malloc_unlock>
 80008f4:	42a3      	cmp	r3, r4
 80008f6:	d908      	bls.n	800090a <_free_r+0x42>
 80008f8:	6820      	ldr	r0, [r4, #0]
 80008fa:	1821      	adds	r1, r4, r0
 80008fc:	428b      	cmp	r3, r1
 80008fe:	bf01      	itttt	eq
 8000900:	6819      	ldreq	r1, [r3, #0]
 8000902:	685b      	ldreq	r3, [r3, #4]
 8000904:	1809      	addeq	r1, r1, r0
 8000906:	6021      	streq	r1, [r4, #0]
 8000908:	e7ed      	b.n	80008e6 <_free_r+0x1e>
 800090a:	461a      	mov	r2, r3
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	b10b      	cbz	r3, 8000914 <_free_r+0x4c>
 8000910:	42a3      	cmp	r3, r4
 8000912:	d9fa      	bls.n	800090a <_free_r+0x42>
 8000914:	6811      	ldr	r1, [r2, #0]
 8000916:	1850      	adds	r0, r2, r1
 8000918:	42a0      	cmp	r0, r4
 800091a:	d10b      	bne.n	8000934 <_free_r+0x6c>
 800091c:	6820      	ldr	r0, [r4, #0]
 800091e:	4401      	add	r1, r0
 8000920:	1850      	adds	r0, r2, r1
 8000922:	4283      	cmp	r3, r0
 8000924:	6011      	str	r1, [r2, #0]
 8000926:	d1e0      	bne.n	80008ea <_free_r+0x22>
 8000928:	6818      	ldr	r0, [r3, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	6053      	str	r3, [r2, #4]
 800092e:	4408      	add	r0, r1
 8000930:	6010      	str	r0, [r2, #0]
 8000932:	e7da      	b.n	80008ea <_free_r+0x22>
 8000934:	d902      	bls.n	800093c <_free_r+0x74>
 8000936:	230c      	movs	r3, #12
 8000938:	602b      	str	r3, [r5, #0]
 800093a:	e7d6      	b.n	80008ea <_free_r+0x22>
 800093c:	6820      	ldr	r0, [r4, #0]
 800093e:	1821      	adds	r1, r4, r0
 8000940:	428b      	cmp	r3, r1
 8000942:	bf04      	itt	eq
 8000944:	6819      	ldreq	r1, [r3, #0]
 8000946:	685b      	ldreq	r3, [r3, #4]
 8000948:	6063      	str	r3, [r4, #4]
 800094a:	bf04      	itt	eq
 800094c:	1809      	addeq	r1, r1, r0
 800094e:	6021      	streq	r1, [r4, #0]
 8000950:	6054      	str	r4, [r2, #4]
 8000952:	e7ca      	b.n	80008ea <_free_r+0x22>
 8000954:	bd38      	pop	{r3, r4, r5, pc}
 8000956:	bf00      	nop
 8000958:	200001c4 	.word	0x200001c4

0800095c <sbrk_aligned>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	4e0f      	ldr	r6, [pc, #60]	@ (800099c <sbrk_aligned+0x40>)
 8000960:	460c      	mov	r4, r1
 8000962:	6831      	ldr	r1, [r6, #0]
 8000964:	4605      	mov	r5, r0
 8000966:	b911      	cbnz	r1, 800096e <sbrk_aligned+0x12>
 8000968:	f000 f9d2 	bl	8000d10 <_sbrk_r>
 800096c:	6030      	str	r0, [r6, #0]
 800096e:	4621      	mov	r1, r4
 8000970:	4628      	mov	r0, r5
 8000972:	f000 f9cd 	bl	8000d10 <_sbrk_r>
 8000976:	1c43      	adds	r3, r0, #1
 8000978:	d103      	bne.n	8000982 <sbrk_aligned+0x26>
 800097a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800097e:	4620      	mov	r0, r4
 8000980:	bd70      	pop	{r4, r5, r6, pc}
 8000982:	1cc4      	adds	r4, r0, #3
 8000984:	f024 0403 	bic.w	r4, r4, #3
 8000988:	42a0      	cmp	r0, r4
 800098a:	d0f8      	beq.n	800097e <sbrk_aligned+0x22>
 800098c:	1a21      	subs	r1, r4, r0
 800098e:	4628      	mov	r0, r5
 8000990:	f000 f9be 	bl	8000d10 <_sbrk_r>
 8000994:	3001      	adds	r0, #1
 8000996:	d1f2      	bne.n	800097e <sbrk_aligned+0x22>
 8000998:	e7ef      	b.n	800097a <sbrk_aligned+0x1e>
 800099a:	bf00      	nop
 800099c:	200001c0 	.word	0x200001c0

080009a0 <_malloc_r>:
 80009a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009a4:	1ccd      	adds	r5, r1, #3
 80009a6:	f025 0503 	bic.w	r5, r5, #3
 80009aa:	3508      	adds	r5, #8
 80009ac:	2d0c      	cmp	r5, #12
 80009ae:	bf38      	it	cc
 80009b0:	250c      	movcc	r5, #12
 80009b2:	2d00      	cmp	r5, #0
 80009b4:	4606      	mov	r6, r0
 80009b6:	db01      	blt.n	80009bc <_malloc_r+0x1c>
 80009b8:	42a9      	cmp	r1, r5
 80009ba:	d904      	bls.n	80009c6 <_malloc_r+0x26>
 80009bc:	230c      	movs	r3, #12
 80009be:	6033      	str	r3, [r6, #0]
 80009c0:	2000      	movs	r0, #0
 80009c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a9c <_malloc_r+0xfc>
 80009ca:	f000 f869 	bl	8000aa0 <__malloc_lock>
 80009ce:	f8d8 3000 	ldr.w	r3, [r8]
 80009d2:	461c      	mov	r4, r3
 80009d4:	bb44      	cbnz	r4, 8000a28 <_malloc_r+0x88>
 80009d6:	4629      	mov	r1, r5
 80009d8:	4630      	mov	r0, r6
 80009da:	f7ff ffbf 	bl	800095c <sbrk_aligned>
 80009de:	1c43      	adds	r3, r0, #1
 80009e0:	4604      	mov	r4, r0
 80009e2:	d158      	bne.n	8000a96 <_malloc_r+0xf6>
 80009e4:	f8d8 4000 	ldr.w	r4, [r8]
 80009e8:	4627      	mov	r7, r4
 80009ea:	2f00      	cmp	r7, #0
 80009ec:	d143      	bne.n	8000a76 <_malloc_r+0xd6>
 80009ee:	2c00      	cmp	r4, #0
 80009f0:	d04b      	beq.n	8000a8a <_malloc_r+0xea>
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	4639      	mov	r1, r7
 80009f6:	4630      	mov	r0, r6
 80009f8:	eb04 0903 	add.w	r9, r4, r3
 80009fc:	f000 f988 	bl	8000d10 <_sbrk_r>
 8000a00:	4581      	cmp	r9, r0
 8000a02:	d142      	bne.n	8000a8a <_malloc_r+0xea>
 8000a04:	6821      	ldr	r1, [r4, #0]
 8000a06:	1a6d      	subs	r5, r5, r1
 8000a08:	4629      	mov	r1, r5
 8000a0a:	4630      	mov	r0, r6
 8000a0c:	f7ff ffa6 	bl	800095c <sbrk_aligned>
 8000a10:	3001      	adds	r0, #1
 8000a12:	d03a      	beq.n	8000a8a <_malloc_r+0xea>
 8000a14:	6823      	ldr	r3, [r4, #0]
 8000a16:	442b      	add	r3, r5
 8000a18:	6023      	str	r3, [r4, #0]
 8000a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	bb62      	cbnz	r2, 8000a7c <_malloc_r+0xdc>
 8000a22:	f8c8 7000 	str.w	r7, [r8]
 8000a26:	e00f      	b.n	8000a48 <_malloc_r+0xa8>
 8000a28:	6822      	ldr	r2, [r4, #0]
 8000a2a:	1b52      	subs	r2, r2, r5
 8000a2c:	d420      	bmi.n	8000a70 <_malloc_r+0xd0>
 8000a2e:	2a0b      	cmp	r2, #11
 8000a30:	d917      	bls.n	8000a62 <_malloc_r+0xc2>
 8000a32:	1961      	adds	r1, r4, r5
 8000a34:	42a3      	cmp	r3, r4
 8000a36:	6025      	str	r5, [r4, #0]
 8000a38:	bf18      	it	ne
 8000a3a:	6059      	strne	r1, [r3, #4]
 8000a3c:	6863      	ldr	r3, [r4, #4]
 8000a3e:	bf08      	it	eq
 8000a40:	f8c8 1000 	streq.w	r1, [r8]
 8000a44:	5162      	str	r2, [r4, r5]
 8000a46:	604b      	str	r3, [r1, #4]
 8000a48:	4630      	mov	r0, r6
 8000a4a:	f000 f82f 	bl	8000aac <__malloc_unlock>
 8000a4e:	f104 000b 	add.w	r0, r4, #11
 8000a52:	1d23      	adds	r3, r4, #4
 8000a54:	f020 0007 	bic.w	r0, r0, #7
 8000a58:	1ac2      	subs	r2, r0, r3
 8000a5a:	bf1c      	itt	ne
 8000a5c:	1a1b      	subne	r3, r3, r0
 8000a5e:	50a3      	strne	r3, [r4, r2]
 8000a60:	e7af      	b.n	80009c2 <_malloc_r+0x22>
 8000a62:	6862      	ldr	r2, [r4, #4]
 8000a64:	42a3      	cmp	r3, r4
 8000a66:	bf0c      	ite	eq
 8000a68:	f8c8 2000 	streq.w	r2, [r8]
 8000a6c:	605a      	strne	r2, [r3, #4]
 8000a6e:	e7eb      	b.n	8000a48 <_malloc_r+0xa8>
 8000a70:	4623      	mov	r3, r4
 8000a72:	6864      	ldr	r4, [r4, #4]
 8000a74:	e7ae      	b.n	80009d4 <_malloc_r+0x34>
 8000a76:	463c      	mov	r4, r7
 8000a78:	687f      	ldr	r7, [r7, #4]
 8000a7a:	e7b6      	b.n	80009ea <_malloc_r+0x4a>
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	42a3      	cmp	r3, r4
 8000a82:	d1fb      	bne.n	8000a7c <_malloc_r+0xdc>
 8000a84:	2300      	movs	r3, #0
 8000a86:	6053      	str	r3, [r2, #4]
 8000a88:	e7de      	b.n	8000a48 <_malloc_r+0xa8>
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	6033      	str	r3, [r6, #0]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	f000 f80c 	bl	8000aac <__malloc_unlock>
 8000a94:	e794      	b.n	80009c0 <_malloc_r+0x20>
 8000a96:	6005      	str	r5, [r0, #0]
 8000a98:	e7d6      	b.n	8000a48 <_malloc_r+0xa8>
 8000a9a:	bf00      	nop
 8000a9c:	200001c4 	.word	0x200001c4

08000aa0 <__malloc_lock>:
 8000aa0:	4801      	ldr	r0, [pc, #4]	@ (8000aa8 <__malloc_lock+0x8>)
 8000aa2:	f7ff bf0e 	b.w	80008c2 <__retarget_lock_acquire_recursive>
 8000aa6:	bf00      	nop
 8000aa8:	200001bc 	.word	0x200001bc

08000aac <__malloc_unlock>:
 8000aac:	4801      	ldr	r0, [pc, #4]	@ (8000ab4 <__malloc_unlock+0x8>)
 8000aae:	f7ff bf09 	b.w	80008c4 <__retarget_lock_release_recursive>
 8000ab2:	bf00      	nop
 8000ab4:	200001bc 	.word	0x200001bc

08000ab8 <__sflush_r>:
 8000ab8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000abe:	0716      	lsls	r6, r2, #28
 8000ac0:	4605      	mov	r5, r0
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	d454      	bmi.n	8000b70 <__sflush_r+0xb8>
 8000ac6:	684b      	ldr	r3, [r1, #4]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	dc02      	bgt.n	8000ad2 <__sflush_r+0x1a>
 8000acc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	dd48      	ble.n	8000b64 <__sflush_r+0xac>
 8000ad2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000ad4:	2e00      	cmp	r6, #0
 8000ad6:	d045      	beq.n	8000b64 <__sflush_r+0xac>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000ade:	682f      	ldr	r7, [r5, #0]
 8000ae0:	6a21      	ldr	r1, [r4, #32]
 8000ae2:	602b      	str	r3, [r5, #0]
 8000ae4:	d030      	beq.n	8000b48 <__sflush_r+0x90>
 8000ae6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000ae8:	89a3      	ldrh	r3, [r4, #12]
 8000aea:	0759      	lsls	r1, r3, #29
 8000aec:	d505      	bpl.n	8000afa <__sflush_r+0x42>
 8000aee:	6863      	ldr	r3, [r4, #4]
 8000af0:	1ad2      	subs	r2, r2, r3
 8000af2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000af4:	b10b      	cbz	r3, 8000afa <__sflush_r+0x42>
 8000af6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000af8:	1ad2      	subs	r2, r2, r3
 8000afa:	2300      	movs	r3, #0
 8000afc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000afe:	6a21      	ldr	r1, [r4, #32]
 8000b00:	4628      	mov	r0, r5
 8000b02:	47b0      	blx	r6
 8000b04:	1c43      	adds	r3, r0, #1
 8000b06:	89a3      	ldrh	r3, [r4, #12]
 8000b08:	d106      	bne.n	8000b18 <__sflush_r+0x60>
 8000b0a:	6829      	ldr	r1, [r5, #0]
 8000b0c:	291d      	cmp	r1, #29
 8000b0e:	d82b      	bhi.n	8000b68 <__sflush_r+0xb0>
 8000b10:	4a28      	ldr	r2, [pc, #160]	@ (8000bb4 <__sflush_r+0xfc>)
 8000b12:	410a      	asrs	r2, r1
 8000b14:	07d6      	lsls	r6, r2, #31
 8000b16:	d427      	bmi.n	8000b68 <__sflush_r+0xb0>
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6062      	str	r2, [r4, #4]
 8000b1c:	04d9      	lsls	r1, r3, #19
 8000b1e:	6922      	ldr	r2, [r4, #16]
 8000b20:	6022      	str	r2, [r4, #0]
 8000b22:	d504      	bpl.n	8000b2e <__sflush_r+0x76>
 8000b24:	1c42      	adds	r2, r0, #1
 8000b26:	d101      	bne.n	8000b2c <__sflush_r+0x74>
 8000b28:	682b      	ldr	r3, [r5, #0]
 8000b2a:	b903      	cbnz	r3, 8000b2e <__sflush_r+0x76>
 8000b2c:	6560      	str	r0, [r4, #84]	@ 0x54
 8000b2e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000b30:	602f      	str	r7, [r5, #0]
 8000b32:	b1b9      	cbz	r1, 8000b64 <__sflush_r+0xac>
 8000b34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000b38:	4299      	cmp	r1, r3
 8000b3a:	d002      	beq.n	8000b42 <__sflush_r+0x8a>
 8000b3c:	4628      	mov	r0, r5
 8000b3e:	f7ff fec3 	bl	80008c8 <_free_r>
 8000b42:	2300      	movs	r3, #0
 8000b44:	6363      	str	r3, [r4, #52]	@ 0x34
 8000b46:	e00d      	b.n	8000b64 <__sflush_r+0xac>
 8000b48:	2301      	movs	r3, #1
 8000b4a:	4628      	mov	r0, r5
 8000b4c:	47b0      	blx	r6
 8000b4e:	4602      	mov	r2, r0
 8000b50:	1c50      	adds	r0, r2, #1
 8000b52:	d1c9      	bne.n	8000ae8 <__sflush_r+0x30>
 8000b54:	682b      	ldr	r3, [r5, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d0c6      	beq.n	8000ae8 <__sflush_r+0x30>
 8000b5a:	2b1d      	cmp	r3, #29
 8000b5c:	d001      	beq.n	8000b62 <__sflush_r+0xaa>
 8000b5e:	2b16      	cmp	r3, #22
 8000b60:	d11d      	bne.n	8000b9e <__sflush_r+0xe6>
 8000b62:	602f      	str	r7, [r5, #0]
 8000b64:	2000      	movs	r0, #0
 8000b66:	e021      	b.n	8000bac <__sflush_r+0xf4>
 8000b68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b6c:	b21b      	sxth	r3, r3
 8000b6e:	e01a      	b.n	8000ba6 <__sflush_r+0xee>
 8000b70:	690f      	ldr	r7, [r1, #16]
 8000b72:	2f00      	cmp	r7, #0
 8000b74:	d0f6      	beq.n	8000b64 <__sflush_r+0xac>
 8000b76:	0793      	lsls	r3, r2, #30
 8000b78:	680e      	ldr	r6, [r1, #0]
 8000b7a:	bf08      	it	eq
 8000b7c:	694b      	ldreq	r3, [r1, #20]
 8000b7e:	600f      	str	r7, [r1, #0]
 8000b80:	bf18      	it	ne
 8000b82:	2300      	movne	r3, #0
 8000b84:	1bf6      	subs	r6, r6, r7
 8000b86:	608b      	str	r3, [r1, #8]
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	ddeb      	ble.n	8000b64 <__sflush_r+0xac>
 8000b8c:	6a21      	ldr	r1, [r4, #32]
 8000b8e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000b92:	4633      	mov	r3, r6
 8000b94:	463a      	mov	r2, r7
 8000b96:	4628      	mov	r0, r5
 8000b98:	47e0      	blx	ip
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	dc07      	bgt.n	8000bae <__sflush_r+0xf6>
 8000b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ba6:	81a3      	strh	r3, [r4, #12]
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bae:	4407      	add	r7, r0
 8000bb0:	1a36      	subs	r6, r6, r0
 8000bb2:	e7e9      	b.n	8000b88 <__sflush_r+0xd0>
 8000bb4:	dfbffffe 	.word	0xdfbffffe

08000bb8 <_fflush_r>:
 8000bb8:	b538      	push	{r3, r4, r5, lr}
 8000bba:	690b      	ldr	r3, [r1, #16]
 8000bbc:	4605      	mov	r5, r0
 8000bbe:	460c      	mov	r4, r1
 8000bc0:	b913      	cbnz	r3, 8000bc8 <_fflush_r+0x10>
 8000bc2:	2500      	movs	r5, #0
 8000bc4:	4628      	mov	r0, r5
 8000bc6:	bd38      	pop	{r3, r4, r5, pc}
 8000bc8:	b118      	cbz	r0, 8000bd2 <_fflush_r+0x1a>
 8000bca:	6a03      	ldr	r3, [r0, #32]
 8000bcc:	b90b      	cbnz	r3, 8000bd2 <_fflush_r+0x1a>
 8000bce:	f7ff fc93 	bl	80004f8 <__sinit>
 8000bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d0f3      	beq.n	8000bc2 <_fflush_r+0xa>
 8000bda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000bdc:	07d0      	lsls	r0, r2, #31
 8000bde:	d404      	bmi.n	8000bea <_fflush_r+0x32>
 8000be0:	0599      	lsls	r1, r3, #22
 8000be2:	d402      	bmi.n	8000bea <_fflush_r+0x32>
 8000be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000be6:	f7ff fe6c 	bl	80008c2 <__retarget_lock_acquire_recursive>
 8000bea:	4628      	mov	r0, r5
 8000bec:	4621      	mov	r1, r4
 8000bee:	f7ff ff63 	bl	8000ab8 <__sflush_r>
 8000bf2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000bf4:	07da      	lsls	r2, r3, #31
 8000bf6:	4605      	mov	r5, r0
 8000bf8:	d4e4      	bmi.n	8000bc4 <_fflush_r+0xc>
 8000bfa:	89a3      	ldrh	r3, [r4, #12]
 8000bfc:	059b      	lsls	r3, r3, #22
 8000bfe:	d4e1      	bmi.n	8000bc4 <_fflush_r+0xc>
 8000c00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000c02:	f7ff fe5f 	bl	80008c4 <__retarget_lock_release_recursive>
 8000c06:	e7dd      	b.n	8000bc4 <_fflush_r+0xc>

08000c08 <__swhatbuf_r>:
 8000c08:	b570      	push	{r4, r5, r6, lr}
 8000c0a:	460c      	mov	r4, r1
 8000c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c10:	2900      	cmp	r1, #0
 8000c12:	b096      	sub	sp, #88	@ 0x58
 8000c14:	4615      	mov	r5, r2
 8000c16:	461e      	mov	r6, r3
 8000c18:	da0d      	bge.n	8000c36 <__swhatbuf_r+0x2e>
 8000c1a:	89a3      	ldrh	r3, [r4, #12]
 8000c1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000c20:	f04f 0100 	mov.w	r1, #0
 8000c24:	bf14      	ite	ne
 8000c26:	2340      	movne	r3, #64	@ 0x40
 8000c28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	6031      	str	r1, [r6, #0]
 8000c30:	602b      	str	r3, [r5, #0]
 8000c32:	b016      	add	sp, #88	@ 0x58
 8000c34:	bd70      	pop	{r4, r5, r6, pc}
 8000c36:	466a      	mov	r2, sp
 8000c38:	f000 f848 	bl	8000ccc <_fstat_r>
 8000c3c:	2800      	cmp	r0, #0
 8000c3e:	dbec      	blt.n	8000c1a <__swhatbuf_r+0x12>
 8000c40:	9901      	ldr	r1, [sp, #4]
 8000c42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000c46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000c4a:	4259      	negs	r1, r3
 8000c4c:	4159      	adcs	r1, r3
 8000c4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c52:	e7eb      	b.n	8000c2c <__swhatbuf_r+0x24>

08000c54 <__smakebuf_r>:
 8000c54:	898b      	ldrh	r3, [r1, #12]
 8000c56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c58:	079d      	lsls	r5, r3, #30
 8000c5a:	4606      	mov	r6, r0
 8000c5c:	460c      	mov	r4, r1
 8000c5e:	d507      	bpl.n	8000c70 <__smakebuf_r+0x1c>
 8000c60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000c64:	6023      	str	r3, [r4, #0]
 8000c66:	6123      	str	r3, [r4, #16]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	6163      	str	r3, [r4, #20]
 8000c6c:	b003      	add	sp, #12
 8000c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c70:	ab01      	add	r3, sp, #4
 8000c72:	466a      	mov	r2, sp
 8000c74:	f7ff ffc8 	bl	8000c08 <__swhatbuf_r>
 8000c78:	9f00      	ldr	r7, [sp, #0]
 8000c7a:	4605      	mov	r5, r0
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	4630      	mov	r0, r6
 8000c80:	f7ff fe8e 	bl	80009a0 <_malloc_r>
 8000c84:	b948      	cbnz	r0, 8000c9a <__smakebuf_r+0x46>
 8000c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c8a:	059a      	lsls	r2, r3, #22
 8000c8c:	d4ee      	bmi.n	8000c6c <__smakebuf_r+0x18>
 8000c8e:	f023 0303 	bic.w	r3, r3, #3
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	81a3      	strh	r3, [r4, #12]
 8000c98:	e7e2      	b.n	8000c60 <__smakebuf_r+0xc>
 8000c9a:	89a3      	ldrh	r3, [r4, #12]
 8000c9c:	6020      	str	r0, [r4, #0]
 8000c9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ca2:	81a3      	strh	r3, [r4, #12]
 8000ca4:	9b01      	ldr	r3, [sp, #4]
 8000ca6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000caa:	b15b      	cbz	r3, 8000cc4 <__smakebuf_r+0x70>
 8000cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	f000 f81d 	bl	8000cf0 <_isatty_r>
 8000cb6:	b128      	cbz	r0, 8000cc4 <__smakebuf_r+0x70>
 8000cb8:	89a3      	ldrh	r3, [r4, #12]
 8000cba:	f023 0303 	bic.w	r3, r3, #3
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	81a3      	strh	r3, [r4, #12]
 8000cc4:	89a3      	ldrh	r3, [r4, #12]
 8000cc6:	431d      	orrs	r5, r3
 8000cc8:	81a5      	strh	r5, [r4, #12]
 8000cca:	e7cf      	b.n	8000c6c <__smakebuf_r+0x18>

08000ccc <_fstat_r>:
 8000ccc:	b538      	push	{r3, r4, r5, lr}
 8000cce:	4d07      	ldr	r5, [pc, #28]	@ (8000cec <_fstat_r+0x20>)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	602b      	str	r3, [r5, #0]
 8000cda:	f7ff fafb 	bl	80002d4 <_fstat>
 8000cde:	1c43      	adds	r3, r0, #1
 8000ce0:	d102      	bne.n	8000ce8 <_fstat_r+0x1c>
 8000ce2:	682b      	ldr	r3, [r5, #0]
 8000ce4:	b103      	cbz	r3, 8000ce8 <_fstat_r+0x1c>
 8000ce6:	6023      	str	r3, [r4, #0]
 8000ce8:	bd38      	pop	{r3, r4, r5, pc}
 8000cea:	bf00      	nop
 8000cec:	200001b8 	.word	0x200001b8

08000cf0 <_isatty_r>:
 8000cf0:	b538      	push	{r3, r4, r5, lr}
 8000cf2:	4d06      	ldr	r5, [pc, #24]	@ (8000d0c <_isatty_r+0x1c>)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	4604      	mov	r4, r0
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	602b      	str	r3, [r5, #0]
 8000cfc:	f7ff faf9 	bl	80002f2 <_isatty>
 8000d00:	1c43      	adds	r3, r0, #1
 8000d02:	d102      	bne.n	8000d0a <_isatty_r+0x1a>
 8000d04:	682b      	ldr	r3, [r5, #0]
 8000d06:	b103      	cbz	r3, 8000d0a <_isatty_r+0x1a>
 8000d08:	6023      	str	r3, [r4, #0]
 8000d0a:	bd38      	pop	{r3, r4, r5, pc}
 8000d0c:	200001b8 	.word	0x200001b8

08000d10 <_sbrk_r>:
 8000d10:	b538      	push	{r3, r4, r5, lr}
 8000d12:	4d06      	ldr	r5, [pc, #24]	@ (8000d2c <_sbrk_r+0x1c>)
 8000d14:	2300      	movs	r3, #0
 8000d16:	4604      	mov	r4, r0
 8000d18:	4608      	mov	r0, r1
 8000d1a:	602b      	str	r3, [r5, #0]
 8000d1c:	f7ff fb00 	bl	8000320 <_sbrk>
 8000d20:	1c43      	adds	r3, r0, #1
 8000d22:	d102      	bne.n	8000d2a <_sbrk_r+0x1a>
 8000d24:	682b      	ldr	r3, [r5, #0]
 8000d26:	b103      	cbz	r3, 8000d2a <_sbrk_r+0x1a>
 8000d28:	6023      	str	r3, [r4, #0]
 8000d2a:	bd38      	pop	{r3, r4, r5, pc}
 8000d2c:	200001b8 	.word	0x200001b8

08000d30 <_init>:
 8000d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d32:	bf00      	nop
 8000d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d36:	bc08      	pop	{r3}
 8000d38:	469e      	mov	lr, r3
 8000d3a:	4770      	bx	lr

08000d3c <_fini>:
 8000d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3e:	bf00      	nop
 8000d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d42:	bc08      	pop	{r3}
 8000d44:	469e      	mov	lr, r3
 8000d46:	4770      	bx	lr
